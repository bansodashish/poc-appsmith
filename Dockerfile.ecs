# Production Dockerfile for Appsmith ECS Deployment
# This Dockerfile is optimized for AWS ECS Fargate deployment

# Use the existing Appsmith Dockerfile as base but with some optimizations
ARG BASE=appsmithorg/base:release
FROM ${BASE}

# Environment variables
ENV IN_DOCKER=1
ENV APPSMITH_DEPLOYMENT_TYPE=ECS_FARGATE

# Build arguments
ARG APPSMITH_CLOUD_SERVICES_BASE_URL
ENV APPSMITH_CLOUD_SERVICES_BASE_URL=${APPSMITH_CLOUD_SERVICES_BASE_URL}

ARG APPSMITH_SEGMENT_CE_KEY
ENV APPSMITH_SEGMENT_CE_KEY=${APPSMITH_SEGMENT_CE_KEY}

# Copy deployment-specific files
COPY deploy/docker/fs /

# Install required packages for ECS deployment
RUN apt-get update && \
    apt-get install -y \
        software-properties-common \
        curl \
        wget \
        && \
    add-apt-repository -y ppa:git-core/ppa && \
    apt-get update && \
    apt-get install -y \
        git \
        tar \
        zstd \
        openssh-client \
        jq \
        awscli \
        && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Validate required files
RUN <<END
  if ! [ -f info.json ]; then
    echo "Missing info.json" >&2
    exit 1
  fi

  if ! [ -f server/mongo/server.jar -a -f server/pg/server.jar ]; then
    echo "Missing one or both server.jar files in the right place. Are you using the build script?" >&2
    exit 1
  fi
END

# Add client UI - Application Layer
COPY ./app/client/build editor/

# Add RTS - Application Layer
COPY ./app/client/packages/rts/dist rts/

# Create the git-storage directory with group writeable permissions
RUN mkdir --mode 775 "/dev/shm/git-storage"

# Set PATH
ENV PATH /opt/bin:/opt/java/bin:/opt/node/bin:$PATH

# Setup permissions and configurations
RUN <<END
  set -o errexit

  # Make all `*.sh` files executable, excluding `node_modules`.
  find . \( -name node_modules -prune \) -o \( -type f -name '*.sh' \) -exec chmod +x '{}' +

  # Ensure all custom command-scripts have executable permission
  chmod +x /opt/bin/* /watchtower-hooks/*.sh

  # Disable setuid/setgid bits for the files inside container.
  find / \( -path /proc -prune \) -o \( \( -perm -2000 -o -perm -4000 \) -exec chmod -s '{}' + \) || true

  # Create necessary directories
  mkdir -p /.mongodb/mongosh /appsmith-stacks
  chmod ugo+w /etc /appsmith-stacks
  chmod -R ugo+w /var/run /.mongodb /etc/ssl /usr/local/share
END

# Add ECS-specific health check script
COPY <<EOF /opt/appsmith/ecs-healthcheck.sh
#!/bin/bash
# ECS-specific health check that includes ALB health check compatibility

# Standard Appsmith health check
/opt/appsmith/healthcheck.sh

# Additional ECS-specific checks
if [ \$? -eq 0 ]; then
  # Check if the application is ready to serve traffic
  curl -f http://localhost/ > /dev/null 2>&1
  exit \$?
else
  exit 1
fi
EOF

RUN chmod +x /opt/appsmith/ecs-healthcheck.sh

# Watchtower labels for container lifecycle management
LABEL com.centurylinklabs.watchtower.lifecycle.pre-check=/watchtower-hooks/pre-check.sh
LABEL com.centurylinklabs.watchtower.lifecycle.pre-update=/watchtower-hooks/pre-update.sh

# ECS-specific labels
LABEL maintainer="Appsmith <engineering@appsmith.com>"
LABEL version="1.0"
LABEL description="Appsmith application optimized for ECS Fargate"

# Expose ports
EXPOSE 80
EXPOSE 443

# Entry point and health check
ENTRYPOINT [ "/opt/appsmith/entrypoint.sh" ]
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD /opt/appsmith/ecs-healthcheck.sh

# Default command
CMD ["/usr/bin/supervisord", "-n"]
